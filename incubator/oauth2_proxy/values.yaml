image: "kminehart/oauth2_proxy"
imageTag: "v2.1-alpine"
imagePullPolicy: "Always"

replicas: 1

# If specified, the TLS certificate is added as a secret and pointed to by command line arguments.
#tls:
#  cert: ""
#  key: ""

secrets:
  client_id: "123456.apps.googleusercontent.com"
  client_secret: ""
  cookie_secret: ""

# These are the defaults specified by oauth2_proxy in their README.
# Any options that are commented out won't be provided to the application unless uncommented.
config: |
  redirect_url = "http://oauth.example.com/oauth2/callback"
  ## the http url(s) of the upstream endpoint. If multiple, routing is based on path
  upstreams = [
      "http://127.0.0.1:8080/"
  ]

  ## Log requests to stdout
  request_logging = true

  ## pass HTTP Basic Auth, X-Forwarded-User and X-Forwarded-Email information to upstream
  pass_basic_auth = true
  pass_user_headers = true
  ## pass the request Host Header to upstream
  ## when disabled the upstream Host is used as the Host Header
  pass_host_header = true 

  ## Email Domains to allow authentication for (this authorizes any email on this domain)
  ## for more granular authorization use `authenticated_emails_file`
  ## To authorize any email addresses use "*"
  email_domains = [
      "*"
  ]

  ## Pass OAuth Access token to upstream via "X-Forwarded-Access-Token"
  pass_access_token = false

  ## skip SSL checking for HTTPS requests
  ssl_insecure_skip_verify = false


  # Cookie Settings
  # Name     - the cookie name
  # Secret   - the seed string for secure cookies; should be 16, 24, or 32 bytes
  #            for use with an AES cipher when cookie_refresh or pass_access_token
  #            is set
  # Domain   - (optional) cookie domain to force cookies to (ie = .yourcompany.com)
  # Expire   - (duration) expire timeframe for cookie
  # Refresh  - (duration) refresh the cookie when duration has elapsed after cookie was initially set.
  #            Should be less than cookie_expire; set to 0 to disable.
  #            On refresh, OAuth token is re-validated. 
  #            (ie = 1h means tokens are refreshed on request 1hr+ after it was set)
  # Secure   - secure cookies are only sent by the browser of a HTTPS connection (recommended)
  # HttpOnly - httponly cookies are not readable by javascript (recommended)
  cookie_name = "_oauth2_proxy"
  cookie_domain = ""
  cookie_expire = "168h"
  cookie_refresh = 0
  cookie_secure = true
  cookie_httponly = true

# http://kubernetes.io/docs/user-guide/compute-resources/
resources:
  requests:
    memory: 128Mi
    cpu: 100m

# This helm chart provides an ingress resource for accessing the oauth2_proxy externally.
ingress:
  enabled: true
  # annotations: {
  #   # GKE users that don't want to use a LoadBalanacer:
  #   kubernetes.io/ingress.class: "nginx",
  #   key: value
  # }
  host: ""
